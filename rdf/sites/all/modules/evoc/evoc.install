<?php
// $Id: evoc.install,v 1.1.0.0 2010/01/8 12:53:17 guidocecilio Exp $

/**
 * Implementation of hook_schema().
 * 
 * Define two tables one for classes and other for properties
 */
function evoc_schema() {
  $schema['evoc_rdf_classes'] = array(
    'fields' => array(
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE),
      'id' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE),
      'label' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE),
      'comment' => array('type' => 'text', 'not null' => TRUE),
      'superclasses' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'ndisjointwith' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0)
    ),
    'primary key' => array(
      'prefix',
      'id',
    ),
  );
 
  $schema['evoc_rdf_properties'] = array(
    'fields' => array(
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE),
      'id' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE),
      'label' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE),
      'comment' => array('type' => 'text', 'not null' => TRUE),
      'superproperties' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'domains' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'ranges' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'inverses' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
    ),
    'primary key' => array(
      'prefix',
      'id',
    ),
  );
  
  $schema['evoc_rdf_superclasses'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => 'TRUE','size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'superclass' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  $schema['evoc_rdf_disjointwith'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => 'TRUE','size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'disjointwith' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  $schema['evoc_rdf_superproperties'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => TRUE,'size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'superproperty' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  $schema['evoc_rdf_propertiesdomains'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => TRUE,'size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'rdf_domain' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  $schema['evoc_rdf_propertiesranges'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => TRUE,'size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'rdf_range' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  $schema['evoc_rdf_inversesproperties'] = array(
    'fields' => array(
      'id' => array('type' => 'serial', 'unsigned' => 'TRUE','size' => 'normal', 'not null' => TRUE),
      'prefix' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'reference' => array('type' => 'varchar', 'length' => '132', 'not null' => TRUE, 'description' => 'this is the CURIE reference or Id'),
      'inverseof' => array('type' => 'varchar', 'length' => '265', 'not null' => TRUE),
    ),
    'primary key' => array('id'),
  );
  
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function evoc_install() {
  drupal_install_schema('evoc');

  // Make primary keys case sensitive on MySQL (VARCHAR defaults to case insensitive on MySQL)
  $report = db_status_report(null);
  if (isset($report['mysql'])) {
    if (!db_query("alter table {evoc_rdf_classes} modify prefix varchar(132) collate utf8_bin not null")
        || !db_query("alter table {evoc_rdf_classes} modify id varchar(132) collate utf8_bin not null")
        || ! db_query("alter table {evoc_rdf_properties} modify prefix varchar(132) collate utf8_bin not null")
        || ! db_query("alter table {evoc_rdf_properties} modify id varchar(132) collate utf8_bin not null")) {
      drupal_set_message( t('There is a problem changing the MySQL collation in tables {evoc_rdf_classes} and {evoc_rdf_properties}.'), 'error' );  
      exit();
    }
  }

  // Evoc built-in vocabularies (core vocabularies)
  module_load_include('module', 'evoc');
  variable_set('evoc_builtin_vocabularies', _evoc_get_builtin_vocabularies_array());
  
//  module_load_include('inc', 'evoc', 'evoc.batch_import');
//  evoc_import_builtin_vocabularies();
  
  drupal_set_message( t('Evoc successfully installed.') );
}

/**
 * Implementation of hook_uninstall().
 */
function evoc_uninstall() {
  // remove the imported vocabularies
  $evoc_array_builtin_vocabularies = variable_get('evoc_builtin_vocabularies', NULL);
  if ($evoc_array_builtin_vocabularies) {
    foreach ($evoc_array_builtin_vocabularies as $vocab) {
      evoc_remove_vocabulary($vocab['prefix']);  
    }
    variable_del('evoc_builtin_vocabularies');
  }
  
  // destroy the persistent variable that is used to know when the built-in vocabularies have been imported 
  variable_del('builtin_vocabularies_imported');
  
  drupal_uninstall_schema('evoc');
  drupal_set_message( t('Evoc successfully uninstalled.') );
}

/**
 * Implementation of hook_enable().
 */
function evoc_enable() {
  drupal_set_message( t('Evoc is now enabled.') );
}

/**
 * Implementation of hook_disable().
 */
function evoc_disable() {
  drupal_set_message( t('Evoc is now disabled.'));
}


/**
 * Implementation of hook_update_N.
 *
 * Rename columns to avoid reserved word conflicts (specifically with MySQL 5.1)
 */
function evoc_update_6001() {
  $ret = array();
  $schema = evoc_schema();
  $fields = $schema['evoc_rdf_properties']['fields'];
  db_change_field($ret, 'evoc_rdf_properties', 'domain', 'rdf_domain', $fields['rdf_domain']);
  db_change_field($ret, 'evoc_rdf_properties', 'range', 'rdf_range', $fields['rdf_range']);
  return $ret;
}

/**
 * Implementation of hook_update_N.
 *
 * Rename columns to avoid reserved word conflicts (specifically with MySQL 5.1)
 * Remark
 * as at the beginning all the superclasses and superproperties were only one the parameter look as a boolean
 * value but it is supose to be and int, but 1 = TRUE = supouse cuantity of superclasses or superproperties
 */
function evoc_update_6100() {
  $ret = array('#finished' => 0);
  
  $schema = evoc_schema();
  
  db_change_field($ret, 'evoc_rdf_classes', 'prefix', 'prefix', $schema['evoc_rdf_classes']['fields']['prefix']);
  db_change_field($ret, 'evoc_rdf_classes', 'id', 'id', $schema['evoc_rdf_classes']['fields']['id']);
  db_change_field($ret, 'evoc_rdf_classes', 'label', 'label', $schema['evoc_rdf_classes']['fields']['label']);
  db_change_field($ret, 'evoc_rdf_properties', 'prefix', 'prefix', $schema['evoc_rdf_classes']['fields']['prefix']);
  db_change_field($ret, 'evoc_rdf_properties', 'id', 'id', $schema['evoc_rdf_classes']['fields']['id']);
  db_change_field($ret, 'evoc_rdf_properties', 'label', 'label', $schema['evoc_rdf_classes']['fields']['label']);
  
  db_add_field($ret, 'evoc_rdf_classes', 'superclasses', $schema['evoc_rdf_classes']['fields']['superclasses']);
  db_add_field($ret, 'evoc_rdf_properties', 'superproperties', $schema['evoc_rdf_properties']['fields']['superproperties']);
  db_add_field($ret, 'evoc_rdf_properties', 'domains', $schema['evoc_rdf_properties']['fields']['domains']);
  db_add_field($ret, 'evoc_rdf_properties', 'ranges', $schema['evoc_rdf_properties']['fields']['ranges']);
  
  db_create_table($ret, 'evoc_rdf_superclasses', $schema['evoc_rdf_superclasses']);
  db_create_table($ret, 'evoc_rdf_superproperties', $schema['evoc_rdf_superproperties']);
  db_create_table($ret, 'evoc_rdf_propertiesdomains', $schema['evoc_rdf_propertiesdomains']);
  db_create_table($ret, 'evoc_rdf_propertiesranges', $schema['evoc_rdf_propertiesranges']);

  // create all the superclasses in the table evoc_rdf_superclasses for each class 
  // in evoc_rdf_classes that its superclass column has some value
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_result(db_query('select count(*) from {evoc_rdf_classes}'));
    $sandbox['max'] += db_result(db_query('select count(*) from {evoc_rdf_properties}'));
  }
  
  $classes = db_query("select prefix, id, superclass from {evoc_rdf_classes}");
  while ($class = db_fetch_object($classes)) {
    $has_superclass = FALSE;
    if( !empty($class->superclass) ) {
      $query = "insert into {evoc_rdf_superclasses} (prefix, reference, superclass) values ('".$class->prefix."', '".$class->id."', '".$class->superclass."')";  
      $ret[] = update_sql($query);
      $has_superclass = TRUE;
    }
   
    $query = "update {evoc_rdf_classes} set superclasses = '".$has_superclass."' where prefix='".$class->prefix."' and id='".$class->id."'";
    $ret[] = update_sql($query);
    $sandbox['progress']++;
  }
  
  $properties = db_query("select prefix, id, rdf_domain, rdf_range from {evoc_rdf_properties}");
  while ($property = db_fetch_object($properties)) {
    $has_domain = $has_range = FALSE;
    
    // check for property domains
    if( !empty($property->rdf_domain) ) {
      $query = "insert into {evoc_rdf_propertiesdomains} (prefix, reference, rdf_domain) values ('".$property->prefix."', '".$property->id."', '".$property->rdf_domain."')";  
      $ret[] = update_sql($query);
      $has_domain = TRUE;
    }
        
    // check for property range
    if( !empty($property->rdf_range) ) {
      $query = "insert into {evoc_rdf_propertiesranges} (prefix, reference, rdf_range) values ('".$property->prefix."', '".$property->id."', '".$property->rdf_range."')";  
      $ret[] = update_sql($query);
      $has_range = TRUE;
    }
   
    $query = "update {evoc_rdf_properties} set domains='".$has_domain."', ranges='".$has_range."' where prefix='".$property->prefix."' and id='".$property->id."'";
    $ret[] = update_sql($query);
    $sandbox['progress']++;
  }
  
  $ret['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  
  // remove the field superclass from evoc_rdf_classes
  db_drop_field($ret, 'evoc_rdf_classes', 'superclass');
  db_drop_field($ret, 'evoc_rdf_properties', 'rdf_domain');
  db_drop_field($ret, 'evoc_rdf_properties', 'rdf_range');
  
  return $ret;
}

/**
 * 
 * @return unknown_type
 */
function evoc_update_6101() {
  $ret = array();
  
  $schema = evoc_schema();
  db_add_field($ret, 'evoc_rdf_classes', 'ndisjointwith', $schema['evoc_rdf_classes']['fields']['ndisjointwith']);
  db_add_field($ret, 'evoc_rdf_properties', 'inverseof', $schema['evoc_rdf_properties']['fields']['inverseof']);
  db_create_table($ret, 'evoc_rdf_disjointwith', $schema['evoc_rdf_disjointwith']);
  
  return ret;
}

/**
 * Update to enable multiple inverses in properties
 * @return unknown_type
 */
function evoc_update_6102() {
  $ret = array('#finished' => 0);
  
  $schema = evoc_schema();
  
  db_add_field($ret, 'evoc_rdf_properties', 'inverses', $schema['evoc_rdf_properties']['fields']['inverses']);
  db_create_table($ret, 'evoc_rdf_inversesproperties', $schema['evoc_rdf_inversesproperties']);

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_result(db_query("SELECT COUNT(*) FROM {evoc_rdf_properties}"));
  }
  
  $properties = db_query("SELECT prefix, id, inverseof FROM {evoc_rdf_properties}");
  while ($property = db_fetch_object($properties)) {
    $has_inverse = FALSE;
    if( !empty($property->inverseof) ) {
      $query = "INSERT INTO {evoc_rdf_inversesproperties} (prefix, reference, inverseof) VALUES ('".$property->prefix."', '".$property->id."', '".$property->inverseof."')";  
      $ret[] = update_sql($query);
      $has_inverse = TRUE;
    }
   
    $query = "UPDATE {evoc_rdf_properties} SET inverses='".$has_inverse."' WHERE prefix='".$property->prefix."' AND  id='".$property->id."'";
    $ret[] = update_sql($query);
    $sandbox['progress']++;
  }
  
  $ret['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  
  db_drop_field($ret, 'evoc_rdf_properties', 'inverseof');
  
  return $ret;
}

/*
 * This update is required for Neologism version 0.5.2
 */
function evoc_update_6103() {
  $ret = array('#finished' => 0);
  
  variable_set('evoc_builtin_vocabularies', _evoc_get_builtin_vocabularies_array());

  module_load_include('module', 'evoc');
  $result = evoc_check_builtin_vocabularies_consistency();
  if ($result['status'] == EVOC_BUILTIN_VOCABULARIES_INCONSISTENCY) {
    // some of the built-in vocabularies is missing, so let's past the missing list to the batch import
    // through a persistent variable that will be destroyed once the process has started.
    variable_set('evoc_missing_builtin_vocabularies', $result['missing_vocabularies']);  
    module_load_include('inc', 'evoc', 'evoc.batch_import');
    evoc_import_builtin_vocabularies();
  }
  else if ($result['status'] == EVOC_BUILTIN_VOCABULARIES_UPDATE_NEEDED) {
    // all built-in vocabularies seem to be installed, then just create the persistent variable
    variable_set('evoc_builtin_vocabularies_imported', TRUE);  
  }
  
  $ret['#finished'] = 1;
  return $ret;
}