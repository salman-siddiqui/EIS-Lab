<?php

/**
 * @file
 * Load the Ext JavaScript framework with Drupal.
 */

/**
 * Implementation of hook_init().
 */
function ext_init() {
  // Load the Ext library if enabled in settings.
  if (variable_get('ext_state', 0)) {
    ext_load_library();
  }
  drupal_add_css(drupal_get_path('module', 'ext') .'/ext.css');
}

/**
 * Implementation of hook_perm().
 */
function ext_perm() {
  return array('administer ext');
}

/**
 * Implementation of hook_menu().
 */
function ext_menu() {
  $items['admin/settings/ext'] = array(
    'title' => 'Ext',
    'description' => 'Settings for Ext.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_form_settings'),
    'access arguments' => array('administer ext'),
  );

  // Add a default General settings tab.
  $items['admin/settings/ext/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer ext'),
    'weight' => -10,
  );

  // Add a tab for showing custom ExtJS Elements
  $items['admin/settings/ext/elements'] = array(
    'title' => 'Custom ExtJS Elements',
    'access arguments' => array('administer ext'),
    'page callback' => 'ext_elements',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}

/**
 * Ext module settings form.
 */
function ext_form_settings() {
  // Fetch the path to Ext, removing the potential trailing slash.
  $ext_path = rtrim(variable_get('ext_path', drupal_get_path('module', 'ext') .'/ext'), '/');

  // Path to Ext library.
  $form['ext_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to library'),
    '#description' => t('Specify the path to where the Ext library is installed, relative to the Drupal installation directory.'),
    '#default_value' => $ext_path,
  );

  // Retrieve all .js files from the Ext directory.
  $libraries = file_scan_directory($ext_path, '\.js$', array(), 0, FALSE);

  if ($libraries) {
    // Add radios for all available Ext libraries.
    foreach ($libraries as $library) {
      $library_options[$library->basename] = $library->basename;
    }
    $form['ext_library'] = array(
      '#type' => 'radios',
      '#title' => t('Library file'),
      '#description' => t('Select which Ext library file to use.'),
      '#options' => $library_options,
      '#default_value' => variable_get('ext_library', 'ext-all.js'),
    );

    // Default state of the Ext library.
    $form['ext_state'] = array(
      '#type' => 'radios',
      '#title' => t('Default state'),
      '#description' => t('Should it be running all the time (Enabled), or only when needed by another module (Disabled)?'),
      '#options' => array(t('Disabled'), t('Enabled')),
      '#default_value' => variable_get('ext_state', 0),
    );

    //Settings for Grid
    if (module_exists('ext_json')) {
      $form['ext_store'] = array(
        '#type' => 'radios',
        '#title' => t('Choose a store for the grid'),
        '#options' => array('SimpleStore' => 'SimpleStore', 'JsonStore' => 'JsonStore'),
        '#default_value' => variable_get('ext_store', 0),
      );
    }
  }
  else {
    // If no Ext libraries were found, produce a warning. TODO: Make this go away as soon as the problem is solved.
    drupal_set_message(t('There were no Ext library files found in the specified directory. Please make sure the path leads to a directory containing the Ext library files.'), 'error', FALSE);
  }

  // Retrieve minified locales from the 'build/locale' directory.
  $locales = file_scan_directory($ext_path .'/build/locale', '\-min.js$', array('ext-lang-en-min.js'));

  if ($locales) {
    // Attempt to retrieve the names of the locales.
    include_once './includes/locale.inc';
    $locales_list = _locale_get_predefined_list();
    foreach ($locales as $locale) {
      $language = drupal_strtolower(str_replace(array('ext-lang-', '-min', '_'), array('', '', '-'), $locale->name));
      $locale_options[$locale->basename] = (isset($locales_list[$language])) ? t($locales_list[$language][0]) : $language;
    }
    natcasesort($locale_options); // Case insensitive sort

    // Add the default option to the top of the list.
    $locale_options = array_merge(array(0 => t('English (default)')), $locale_options);

    // Add radios for all Ext locales.
    $form['ext_locale'] = array(
      '#type' => 'select',
      '#title' => t('Locale'),
      '#description' => t('Select the locale you wish to use with Ext.'),
      '#options' => $locale_options,
      '#default_value' => variable_get('ext_locale', 0),
    );
  }

/* This may not be needed after all, as modules depending on this module should
   add any Ext component dependencies programatically. Users may also use the
   'Build your own Ext JS' service on extjs.com to compile a library according
   to their needs. I'm leaving this here just in case it turns out useful.

  // Retrieve minified components and classes from the 'build' directories.
  $components = file_scan_directory($ext_path .'/build', '\-min.js$', array('adapter', 'locale'));
  if ($components) {
    // Fieldset for Ext components and classes.
    $form['components'] = array(
      '#type' => 'fieldset',
      '#title' => t('Components and classes'),
      '#description' => t('Select which components and classes you wish to enable.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    // Add checkboxes for all Ext components.
    ksort($components);
    foreach ($components as $component) {
      $path = explode('/', str_replace(array($ext_path .'/build/', '-min.js'), '', $component->filename));
      $form['components'][$component->filename] = array(
        '#type' => 'checkbox',
        '#title' => ucwords(implode(' â€º ', $path)),
      );
    }
  }*/

  return system_settings_form($form);
}

/**
 * Load the Ext library.
 *
 * @param $library
 *   The library file to load, relative to the Ext library directory.
 */
function ext_load_library($library = NULL) {
  static $loaded = FALSE;

  // Make sure the library is only loaded once.
  if (!$loaded) {
    // Fetch the path to Ext, removing the potential trailing slash. TODO: Do this when saving settings.
    $ext_path = rtrim(variable_get('ext_path', drupal_get_path('module', 'ext') .'/ext'), '/');

    // Load adapter.
    drupal_add_js($ext_path .'/adapter/jquery/ext-jquery-adapter.js');

    // Load library.
    if (!$library) {
      $library = variable_get('ext_library', 'ext-all.js');
    }
    drupal_add_js($ext_path .'/'. $library);

    // Load locale, if one has been specified.
    if (variable_get('ext_locale', 0)) {
      drupal_add_js($ext_path .'/build/locale/'. variable_get('ext_locale', 0));
    }

    // Load CSS. TODO: Add settings for this.
    drupal_add_css($ext_path .'/resources/css/ext-all.css');

    //Load Ext.BLANK_IMAGE_URL
    global $base_url;
    drupal_add_js("Ext.BLANK_IMAGE_URL='{$base_url}/{$ext_path}/resources/images/default/s.gif';", 'inline');

    $loaded = TRUE;
  }
}

/**
 * Implementation of hook_requirements().
 */
function ext_requirements($phase) {

  $ext_path = rtrim(variable_get('ext_path', drupal_get_path('module', 'ext') .'/ext'), '/');

  if (file_exists($ext_path .'/'. variable_get('ext_library', 'ext-all.js'))) {
    //Get the file that the user has selected
    $file = variable_get('ext_library', 'ext-all.js');

    //Make tha pattern to get the version
    $pattern = '/Ext JS Library ([0-9\.a-z]+)/i';

    //Gets the file contents
    $jquery = file_get_contents($ext_path .'/'. variable_get('ext_library', 'ext-all.js'));

    //find the version
    if (preg_match($pattern, $jquery, $matches)) {
      $version = $matches[1];
    }

    //if no version has found
    //TODO: recheck on version 3 of extjs
    if ($version == '') {
      unset($version);
    }

    //make the requirements
    $requirements['ext'] = array(
      'title' => 'ExtJS Version',
      'value' => ($phase == 'runtime') ? $version : 'There were no Ext library files found in the specified directory. Please make sure the path leads to a directory containing the Ext library files.'
    );
  }
  return $requirements;
}

/**
 * Implementation of hook_views_api().
 */
function ext_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_theme().
 */
function ext_theme($existing, $type, $theme, $path) {
  return array(
    'ext_grid' => array(
      'arguments' => array('view' => NULL, 'options' => array(), 'rows' => array(), 'title' => ''),
      'template' => 'ext-grid',
    ),
    'ext_store' => array(
      'arguments' => array('rows' => NULL, 'options' => NULL, 'id' => NULL),
      'file' => 'ext.theme.inc',
    ),
    'ext_js' => array(
      'arguments' => array('rows' => NULL, 'options' => NULL, 'id' => NULL, 'columns' => NULL, 'data' => NULL, 'view' => '', 'display_id' => 'default'),
      'file' => 'ext.theme.inc',
    ),
    'ext_ui_style_plugin_extjs_grid' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ext.theme.inc',
    )
  );
}

/**
 * Theme preprocess function for ext-grid.tpl.php
 */
function template_preprocess_ext_grid(&$vars) {
  $view = $vars['view'];
  $result   = $vars['rows'];
  $fields   = &$view->field;

  //Create the columns for the grid
  $vars['columns'] = Array();

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = array();
  $keys = array_keys($view->field);
  foreach ($result as $count => $row) {
    foreach ($keys as $id) {
      $renders[$count][$id] = $view->field[$id]->theme($row);
    }
  }

  //Render the header
  foreach ($view->field as $id => $field) {
    //if the user has checked the 'exclude' option, dont add it on the array
    if (empty($fields[$id]->options['exclude'])) {
      //return the label of the field
      $vars['columns'][$id] = check_plain(!empty($fields[$id]) ? $fields[$id]->label() : '');
    }//endif
  }//endforeach

  // Get the rows for the grid
  // Render each field into its appropriate column.
  foreach ($renders as $row => $data) {
    $vars['data'] .= "[";
    $string = "";
    foreach (array_keys($vars['columns']) as $id) {
      $string .= "'". $data[$id] . "',";
    }
    $string = decode_entities($string);
    $vars['data'] .= rtrim($string, ',');

    $vars['data'] .= "],\n";
  }//endforeach
}

/**
 * Create an ExtJS Object
 *
 * @param $name
 *   The name for the variable to assigned the extjs object
 *
 * @param $object
 *   a valid extjs object
 *   for example (Button, Window, etc...)
 *
 * @param $config
 *   An array with the config options for the ExtJS object
 *   for example $config = array('title'=> 'test', 'width' => '500')
 *
 * @param $code
 *   Custom javascript code to append at the end
 */

function ext_object($name, $object, $config, $code = NULL) {

  foreach ($config AS $item => $value) {
    $options .= $item .":". $value .",";
  }

  $js = "
	Ext.onReady(function(){
	  var ". $name ."  = new Ext.". $object ."({
           ". $options ."
      });
      ". $code ."
    });";

  drupal_add_js($js, 'inline', 'footer');
}

/*
 *  ext_elements
 */
function ext_elements() {

  if (arg(0) == 'admin' && arg(1) == 'settings' && arg(2) == 'ext' && arg(3) == 'elements') {
    //Load the libray if not enabled by default
    ext_load_library();

    //Create a link for opening a window
    $config = Array('title' => '"test"', 'width' => '200', 'height' => '200', 'closeAction' => '"hide"', 'html' => '"This is a window! :-D "');
    $code = "Ext.get('window').on('click', function(e){ window.show(); });";
    ext_object('window', 'Window', $config, $code);

    //Create a window with a drupal block inside
    $block = module_invoke('user', 'block', 'view', 3);
    $config = Array('title' => '"'. $block['subject'] .'"', 'width' => '200', 'height' => '120', 'modal' => '"TRUE"', 'closeAction' => '"hide"', 'html' => drupal_to_js($block['content']), 'bodyStyle' => '"padding: 10px"' );
    $code = "Ext.get('block-window').on('click', function(e){ windowBlock.show(); });";
    ext_object('windowBlock', 'Window', $config, $code);

    //Render a color pallette at a div#color
    $config = Array('value' => '"993300"', 'renderTo' => '"color"');
    $code = "color.on('select', function(palette, selColor){ Ext.Msg.alert('Status', 'You clicked:'+selColor)});";
    ext_object('color', 'ColorPalette', $config, $code);

    //Render a slider
    $config = Array('renderTo' => '"slider"', 'width' => '214', 'minValue' => '0', 'maxValue' => '100');
    ext_object('slider', 'Slider', $config);

    $output = "<span>With the API you can create any custom ExtJS element you want on your page. <br/>For example:</span>";
    $output .= "<ul>";
    $output .= "<li><a id='window' href='#'>A simple window</a></li>";
    $output .= "<li><a id='block-window' href='#'>A window with a drupal block inside</a></li>";
    $output .= "<li><div id='color'></div>";
    $output .= "<li><div id='slider'></div></li>";
    $output .= "</ul>";

    return $output;
  }
}
 